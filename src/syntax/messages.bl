highlight_messages_syntax :: fn (buf: *Buffer) {
	using std;

	assert(buf.dirty_syntax == true, "This should be called only if syntax is dirty!");

	buf.colors.len = 0;
	array_resize(&buf.colors, buf.bytes.len);
	zero_slice(buf.colors);

	ctx :: Tokenizer.{
		base = TokenizerBase.{
			bytes = buf.bytes,
		},
	};

	loop {
		using Token.kind;

		token :: next_token(&ctx);
		if token.kind == EOF { break; }

		if token.len > 0 {
			memset(&buf.colors[token.index], auto token.kind, auto token.len);
		}
	}
}

#private

Tokenizer :: struct #base TokenizerBase {
}

Token :: struct {
	kind: enum u8 {
		EOF = -1;

		ERROR   = CODE_COLOR_ERROR_INDEX;
		WARNING = CODE_COLOR_WARNING_INDEX;
	};

	index: s32;
	len:   s32;
}

next_token :: fn (ctx: *Tokenizer) Token {
	using Token.kind;

	loop ctx.index < ctx.bytes.len {
		eat_whitespace(ctx);
		t :: Token.{
			kind  = EOF,
			index = ctx.index,
		};

		if parse_message(ctx, &t) { return t; }
	}

	return Token.{ kind = EOF };
}

parse_message :: fn (ctx: *Tokenizer, t: *Token) bool {
	using std;
	using Token.kind;

	line :: eat_line_and_trim_eol(ctx);
	if str_match(string_view.{ 6, &line[0] }, "error:") {
		t.kind = ERROR;
		t.len  = auto line.len;
		return true;
	} else if str_match(string_view.{ 8, &line[0] }, "warning:") {
		t.kind = WARNING;
		t.len  = auto line.len;
		return true;
	}
	return false;
}
